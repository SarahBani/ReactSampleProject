// <auto-generated />
using Core.DomainModel.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Core.DomainModel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210420062548_seed hotel & hotel_photo")]
    partial class seedhotelhotelphoto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Core.DomainModel.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique()
                        .HasName("ix_city_country_id_name");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Core.DomainModel.Entities.Country", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("id")
                        .HasColumnType("smallint");

                    b.Property<string>("FlagUrl")
                        .HasColumnName("flag_url")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("ix_country_name");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Core.DomainModel.Entities.Hotel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<long>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Stars")
                        .HasColumnName("stars")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("pk_hotel");

                    b.HasIndex("CityId")
                        .HasName("ix_hotel_city_id");

                    b.ToTable("hotel");
                });

            modelBuilder.Entity("Core.DomainModel.Entities.HotelPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("HotelId")
                        .HasColumnName("hotel_id")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnName("photo_url")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_hotel_photo");

                    b.HasIndex("HotelId")
                        .HasName("ix_hotel_photo_hotel_id");

                    b.ToTable("hotel_photo");
                });

            modelBuilder.Entity("Core.DomainModel.Entities.City", b =>
                {
                    b.HasOne("Core.DomainModel.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_city_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DomainModel.Entities.Hotel", b =>
                {
                    b.HasOne("Core.DomainModel.Entities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_hotel_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DomainModel.Entities.HotelPhoto", b =>
                {
                    b.HasOne("Core.DomainModel.Entities.Hotel", "Hotel")
                        .WithMany("Photos")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_hotel_photo_hotel_hotel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
